// source: speech-to-text.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_api_client_pb = require('./google/api/client_pb.js');
goog.object.extend(proto, google_api_client_pb);
var google_api_field_behavior_pb = require('./google/api/field_behavior_pb.js');
goog.object.extend(proto, google_api_field_behavior_pb);
var google_rpc_status_pb = require('./google/api/status_pb.js');
goog.object.extend(proto, google_rpc_status_pb);
goog.exportSymbol('proto.speech_to_text.LongRunningRecognizeRequest', null, global);
goog.exportSymbol('proto.speech_to_text.LongRunningRecognizeResponse', null, global);
goog.exportSymbol('proto.speech_to_text.RecognitionAudio', null, global);
goog.exportSymbol('proto.speech_to_text.RecognitionAudio.AudioSourceCase', null, global);
goog.exportSymbol('proto.speech_to_text.RecognitionConfig', null, global);
goog.exportSymbol('proto.speech_to_text.RecognitionConfig.AudioEncoding', null, global);
goog.exportSymbol('proto.speech_to_text.RecognizeRequest', null, global);
goog.exportSymbol('proto.speech_to_text.RecognizeResponse', null, global);
goog.exportSymbol('proto.speech_to_text.SpeakerDiarizationConfig', null, global);
goog.exportSymbol('proto.speech_to_text.SpeechContext', null, global);
goog.exportSymbol('proto.speech_to_text.SpeechOperation', null, global);
goog.exportSymbol('proto.speech_to_text.SpeechOperation.ResultCase', null, global);
goog.exportSymbol('proto.speech_to_text.SpeechOperationRequest', null, global);
goog.exportSymbol('proto.speech_to_text.SpeechRecognitionAlternative', null, global);
goog.exportSymbol('proto.speech_to_text.SpeechRecognitionResult', null, global);
goog.exportSymbol('proto.speech_to_text.StreamingRecognitionConfig', null, global);
goog.exportSymbol('proto.speech_to_text.StreamingRecognitionResult', null, global);
goog.exportSymbol('proto.speech_to_text.StreamingRecognizeRequest', null, global);
goog.exportSymbol('proto.speech_to_text.StreamingRecognizeRequest.StreamingRequestCase', null, global);
goog.exportSymbol('proto.speech_to_text.StreamingRecognizeResponse', null, global);
goog.exportSymbol('proto.speech_to_text.WordInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.RecognizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speech_to_text.RecognizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.RecognizeRequest.displayName = 'proto.speech_to_text.RecognizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.LongRunningRecognizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speech_to_text.LongRunningRecognizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.LongRunningRecognizeRequest.displayName = 'proto.speech_to_text.LongRunningRecognizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.SpeechOperationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speech_to_text.SpeechOperationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.SpeechOperationRequest.displayName = 'proto.speech_to_text.SpeechOperationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.StreamingRecognizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speech_to_text.StreamingRecognizeRequest.oneofGroups_);
};
goog.inherits(proto.speech_to_text.StreamingRecognizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.StreamingRecognizeRequest.displayName = 'proto.speech_to_text.StreamingRecognizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.StreamingRecognitionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speech_to_text.StreamingRecognitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.StreamingRecognitionConfig.displayName = 'proto.speech_to_text.StreamingRecognitionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.RecognitionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.RecognitionConfig.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.RecognitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.RecognitionConfig.displayName = 'proto.speech_to_text.RecognitionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.SpeechContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.SpeechContext.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.SpeechContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.SpeechContext.displayName = 'proto.speech_to_text.SpeechContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.SpeakerDiarizationConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speech_to_text.SpeakerDiarizationConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.SpeakerDiarizationConfig.displayName = 'proto.speech_to_text.SpeakerDiarizationConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.RecognitionAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speech_to_text.RecognitionAudio.oneofGroups_);
};
goog.inherits(proto.speech_to_text.RecognitionAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.RecognitionAudio.displayName = 'proto.speech_to_text.RecognitionAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.RecognizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.RecognizeResponse.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.RecognizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.RecognizeResponse.displayName = 'proto.speech_to_text.RecognizeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.LongRunningRecognizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.LongRunningRecognizeResponse.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.LongRunningRecognizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.LongRunningRecognizeResponse.displayName = 'proto.speech_to_text.LongRunningRecognizeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.StreamingRecognizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.StreamingRecognizeResponse.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.StreamingRecognizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.StreamingRecognizeResponse.displayName = 'proto.speech_to_text.StreamingRecognizeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.SpeechRecognitionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.SpeechRecognitionResult.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.SpeechRecognitionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.SpeechRecognitionResult.displayName = 'proto.speech_to_text.SpeechRecognitionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.StreamingRecognitionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.StreamingRecognitionResult.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.StreamingRecognitionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.StreamingRecognitionResult.displayName = 'proto.speech_to_text.StreamingRecognitionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.SpeechRecognitionAlternative = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speech_to_text.SpeechRecognitionAlternative.repeatedFields_, null);
};
goog.inherits(proto.speech_to_text.SpeechRecognitionAlternative, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.SpeechRecognitionAlternative.displayName = 'proto.speech_to_text.SpeechRecognitionAlternative';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.WordInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speech_to_text.WordInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.WordInfo.displayName = 'proto.speech_to_text.WordInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speech_to_text.SpeechOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speech_to_text.SpeechOperation.oneofGroups_);
};
goog.inherits(proto.speech_to_text.SpeechOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speech_to_text.SpeechOperation.displayName = 'proto.speech_to_text.SpeechOperation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.RecognizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.RecognizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.RecognizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.speech_to_text.RecognitionConfig.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.speech_to_text.RecognitionAudio.toObject(includeInstance, f),
    segment: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.RecognizeRequest}
 */
proto.speech_to_text.RecognizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.RecognizeRequest;
  return proto.speech_to_text.RecognizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.RecognizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.RecognizeRequest}
 */
proto.speech_to_text.RecognizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.RecognitionConfig;
      reader.readMessage(value,proto.speech_to_text.RecognitionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.speech_to_text.RecognitionAudio;
      reader.readMessage(value,proto.speech_to_text.RecognitionAudio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.RecognizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.RecognizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.RecognizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speech_to_text.RecognitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speech_to_text.RecognitionAudio.serializeBinaryToWriter
    );
  }
  f = message.getSegment();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.speech_to_text.RecognitionConfig}
 */
proto.speech_to_text.RecognizeRequest.prototype.getConfig = function() {
  return /** @type{?proto.speech_to_text.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.RecognitionConfig, 1));
};


/**
 * @param {?proto.speech_to_text.RecognitionConfig|undefined} value
 * @return {!proto.speech_to_text.RecognizeRequest} returns this
*/
proto.speech_to_text.RecognizeRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.RecognizeRequest} returns this
 */
proto.speech_to_text.RecognizeRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.RecognizeRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RecognitionAudio audio = 2;
 * @return {?proto.speech_to_text.RecognitionAudio}
 */
proto.speech_to_text.RecognizeRequest.prototype.getAudio = function() {
  return /** @type{?proto.speech_to_text.RecognitionAudio} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.RecognitionAudio, 2));
};


/**
 * @param {?proto.speech_to_text.RecognitionAudio|undefined} value
 * @return {!proto.speech_to_text.RecognizeRequest} returns this
*/
proto.speech_to_text.RecognizeRequest.prototype.setAudio = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.RecognizeRequest} returns this
 */
proto.speech_to_text.RecognizeRequest.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.RecognizeRequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string segment = 16;
 * @return {string}
 */
proto.speech_to_text.RecognizeRequest.prototype.getSegment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.RecognizeRequest} returns this
 */
proto.speech_to_text.RecognizeRequest.prototype.setSegment = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.LongRunningRecognizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.LongRunningRecognizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.LongRunningRecognizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.speech_to_text.RecognitionConfig.toObject(includeInstance, f),
    audio: (f = msg.getAudio()) && proto.speech_to_text.RecognitionAudio.toObject(includeInstance, f),
    resultUrl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    segment: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest}
 */
proto.speech_to_text.LongRunningRecognizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.LongRunningRecognizeRequest;
  return proto.speech_to_text.LongRunningRecognizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.LongRunningRecognizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest}
 */
proto.speech_to_text.LongRunningRecognizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.RecognitionConfig;
      reader.readMessage(value,proto.speech_to_text.RecognitionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.speech_to_text.RecognitionAudio;
      reader.readMessage(value,proto.speech_to_text.RecognitionAudio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultUrl(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.LongRunningRecognizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.LongRunningRecognizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.LongRunningRecognizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speech_to_text.RecognitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speech_to_text.RecognitionAudio.serializeBinaryToWriter
    );
  }
  f = message.getResultUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSegment();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.speech_to_text.RecognitionConfig}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.getConfig = function() {
  return /** @type{?proto.speech_to_text.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.RecognitionConfig, 1));
};


/**
 * @param {?proto.speech_to_text.RecognitionConfig|undefined} value
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest} returns this
*/
proto.speech_to_text.LongRunningRecognizeRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest} returns this
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RecognitionAudio audio = 2;
 * @return {?proto.speech_to_text.RecognitionAudio}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.getAudio = function() {
  return /** @type{?proto.speech_to_text.RecognitionAudio} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.RecognitionAudio, 2));
};


/**
 * @param {?proto.speech_to_text.RecognitionAudio|undefined} value
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest} returns this
*/
proto.speech_to_text.LongRunningRecognizeRequest.prototype.setAudio = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest} returns this
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string result_url = 11;
 * @return {string}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.getResultUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest} returns this
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.setResultUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string segment = 16;
 * @return {string}
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.getSegment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.LongRunningRecognizeRequest} returns this
 */
proto.speech_to_text.LongRunningRecognizeRequest.prototype.setSegment = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.SpeechOperationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.SpeechOperationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.SpeechOperationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechOperationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.SpeechOperationRequest}
 */
proto.speech_to_text.SpeechOperationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.SpeechOperationRequest;
  return proto.speech_to_text.SpeechOperationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.SpeechOperationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.SpeechOperationRequest}
 */
proto.speech_to_text.SpeechOperationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.SpeechOperationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.SpeechOperationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.SpeechOperationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechOperationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.speech_to_text.SpeechOperationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.SpeechOperationRequest} returns this
 */
proto.speech_to_text.SpeechOperationRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speech_to_text.StreamingRecognizeRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.speech_to_text.StreamingRecognizeRequest.StreamingRequestCase = {
  STREAMING_REQUEST_NOT_SET: 0,
  STREAMING_CONFIG: 1,
  AUDIO_CONTENT: 2
};

/**
 * @return {proto.speech_to_text.StreamingRecognizeRequest.StreamingRequestCase}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.getStreamingRequestCase = function() {
  return /** @type {proto.speech_to_text.StreamingRecognizeRequest.StreamingRequestCase} */(jspb.Message.computeOneofCase(this, proto.speech_to_text.StreamingRecognizeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.StreamingRecognizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.StreamingRecognizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamingConfig: (f = msg.getStreamingConfig()) && proto.speech_to_text.StreamingRecognitionConfig.toObject(includeInstance, f),
    audioContent: msg.getAudioContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.StreamingRecognizeRequest}
 */
proto.speech_to_text.StreamingRecognizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.StreamingRecognizeRequest;
  return proto.speech_to_text.StreamingRecognizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.StreamingRecognizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.StreamingRecognizeRequest}
 */
proto.speech_to_text.StreamingRecognizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.StreamingRecognitionConfig;
      reader.readMessage(value,proto.speech_to_text.StreamingRecognitionConfig.deserializeBinaryFromReader);
      msg.setStreamingConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.StreamingRecognizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.StreamingRecognizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamingConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speech_to_text.StreamingRecognitionConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional StreamingRecognitionConfig streaming_config = 1;
 * @return {?proto.speech_to_text.StreamingRecognitionConfig}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.getStreamingConfig = function() {
  return /** @type{?proto.speech_to_text.StreamingRecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.StreamingRecognitionConfig, 1));
};


/**
 * @param {?proto.speech_to_text.StreamingRecognitionConfig|undefined} value
 * @return {!proto.speech_to_text.StreamingRecognizeRequest} returns this
*/
proto.speech_to_text.StreamingRecognizeRequest.prototype.setStreamingConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.speech_to_text.StreamingRecognizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.StreamingRecognizeRequest} returns this
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.clearStreamingConfig = function() {
  return this.setStreamingConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.hasStreamingConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audio_content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.getAudioContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audio_content = 2;
 * This is a type-conversion wrapper around `getAudioContent()`
 * @return {string}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.getAudioContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioContent()));
};


/**
 * optional bytes audio_content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioContent()`
 * @return {!Uint8Array}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.getAudioContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.speech_to_text.StreamingRecognizeRequest} returns this
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.setAudioContent = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.speech_to_text.StreamingRecognizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speech_to_text.StreamingRecognizeRequest} returns this
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.clearAudioContent = function() {
  return jspb.Message.setOneofField(this, 2, proto.speech_to_text.StreamingRecognizeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.StreamingRecognizeRequest.prototype.hasAudioContent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.StreamingRecognitionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.StreamingRecognitionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.StreamingRecognitionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognitionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.speech_to_text.RecognitionConfig.toObject(includeInstance, f),
    interimResults: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.StreamingRecognitionConfig}
 */
proto.speech_to_text.StreamingRecognitionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.StreamingRecognitionConfig;
  return proto.speech_to_text.StreamingRecognitionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.StreamingRecognitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.StreamingRecognitionConfig}
 */
proto.speech_to_text.StreamingRecognitionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.RecognitionConfig;
      reader.readMessage(value,proto.speech_to_text.RecognitionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInterimResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.StreamingRecognitionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.StreamingRecognitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.StreamingRecognitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognitionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speech_to_text.RecognitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getInterimResults();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.speech_to_text.RecognitionConfig}
 */
proto.speech_to_text.StreamingRecognitionConfig.prototype.getConfig = function() {
  return /** @type{?proto.speech_to_text.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.RecognitionConfig, 1));
};


/**
 * @param {?proto.speech_to_text.RecognitionConfig|undefined} value
 * @return {!proto.speech_to_text.StreamingRecognitionConfig} returns this
*/
proto.speech_to_text.StreamingRecognitionConfig.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.StreamingRecognitionConfig} returns this
 */
proto.speech_to_text.StreamingRecognitionConfig.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.StreamingRecognitionConfig.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool interim_results = 2;
 * @return {boolean}
 */
proto.speech_to_text.StreamingRecognitionConfig.prototype.getInterimResults = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speech_to_text.StreamingRecognitionConfig} returns this
 */
proto.speech_to_text.StreamingRecognitionConfig.prototype.setInterimResults = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.RecognitionConfig.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.RecognitionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.RecognitionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.RecognitionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognitionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoding: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sampleRateHertz: jspb.Message.getFieldWithDefault(msg, 2, 0),
    languageCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    maxAlternatives: jspb.Message.getFieldWithDefault(msg, 4, 0),
    speechContextsList: jspb.Message.toObjectList(msg.getSpeechContextsList(),
    proto.speech_to_text.SpeechContext.toObject, includeInstance),
    audioChannelCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    enableSeparateRecognitionPerChannel: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    enableWordTimeOffsets: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    enableAutomaticPunctuation: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    diarizationConfig: (f = msg.getDiarizationConfig()) && proto.speech_to_text.SpeakerDiarizationConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.RecognitionConfig}
 */
proto.speech_to_text.RecognitionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.RecognitionConfig;
  return proto.speech_to_text.RecognitionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.RecognitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.RecognitionConfig}
 */
proto.speech_to_text.RecognitionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speech_to_text.RecognitionConfig.AudioEncoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleRateHertz(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxAlternatives(value);
      break;
    case 5:
      var value = new proto.speech_to_text.SpeechContext;
      reader.readMessage(value,proto.speech_to_text.SpeechContext.deserializeBinaryFromReader);
      msg.addSpeechContexts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAudioChannelCount(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSeparateRecognitionPerChannel(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableWordTimeOffsets(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableAutomaticPunctuation(value);
      break;
    case 16:
      var value = new proto.speech_to_text.SpeakerDiarizationConfig;
      reader.readMessage(value,proto.speech_to_text.SpeakerDiarizationConfig.deserializeBinaryFromReader);
      msg.setDiarizationConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.RecognitionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.RecognitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.RecognitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognitionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSampleRateHertz();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMaxAlternatives();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSpeechContextsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.speech_to_text.SpeechContext.serializeBinaryToWriter
    );
  }
  f = message.getAudioChannelCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getEnableSeparateRecognitionPerChannel();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getEnableWordTimeOffsets();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getEnableAutomaticPunctuation();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getDiarizationConfig();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.speech_to_text.SpeakerDiarizationConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.speech_to_text.RecognitionConfig.AudioEncoding = {
  ENCODING_UNSPECIFIED: 0,
  LINEAR16: 1,
  FLAC: 2,
  MP3: 3
};

/**
 * optional AudioEncoding encoding = 1;
 * @return {!proto.speech_to_text.RecognitionConfig.AudioEncoding}
 */
proto.speech_to_text.RecognitionConfig.prototype.getEncoding = function() {
  return /** @type {!proto.speech_to_text.RecognitionConfig.AudioEncoding} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speech_to_text.RecognitionConfig.AudioEncoding} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 sample_rate_hertz = 2;
 * @return {number}
 */
proto.speech_to_text.RecognitionConfig.prototype.getSampleRateHertz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setSampleRateHertz = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string language_code = 3;
 * @return {string}
 */
proto.speech_to_text.RecognitionConfig.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 max_alternatives = 4;
 * @return {number}
 */
proto.speech_to_text.RecognitionConfig.prototype.getMaxAlternatives = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setMaxAlternatives = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated SpeechContext speech_contexts = 5;
 * @return {!Array<!proto.speech_to_text.SpeechContext>}
 */
proto.speech_to_text.RecognitionConfig.prototype.getSpeechContextsList = function() {
  return /** @type{!Array<!proto.speech_to_text.SpeechContext>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speech_to_text.SpeechContext, 5));
};


/**
 * @param {!Array<!proto.speech_to_text.SpeechContext>} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
*/
proto.speech_to_text.RecognitionConfig.prototype.setSpeechContextsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.speech_to_text.SpeechContext=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.SpeechContext}
 */
proto.speech_to_text.RecognitionConfig.prototype.addSpeechContexts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.speech_to_text.SpeechContext, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.clearSpeechContextsList = function() {
  return this.setSpeechContextsList([]);
};


/**
 * optional int32 audio_channel_count = 6;
 * @return {number}
 */
proto.speech_to_text.RecognitionConfig.prototype.getAudioChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setAudioChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool enable_separate_recognition_per_channel = 7;
 * @return {boolean}
 */
proto.speech_to_text.RecognitionConfig.prototype.getEnableSeparateRecognitionPerChannel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setEnableSeparateRecognitionPerChannel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool enable_word_time_offsets = 8;
 * @return {boolean}
 */
proto.speech_to_text.RecognitionConfig.prototype.getEnableWordTimeOffsets = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setEnableWordTimeOffsets = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool enable_automatic_punctuation = 11;
 * @return {boolean}
 */
proto.speech_to_text.RecognitionConfig.prototype.getEnableAutomaticPunctuation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.setEnableAutomaticPunctuation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional SpeakerDiarizationConfig diarization_config = 16;
 * @return {?proto.speech_to_text.SpeakerDiarizationConfig}
 */
proto.speech_to_text.RecognitionConfig.prototype.getDiarizationConfig = function() {
  return /** @type{?proto.speech_to_text.SpeakerDiarizationConfig} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.SpeakerDiarizationConfig, 16));
};


/**
 * @param {?proto.speech_to_text.SpeakerDiarizationConfig|undefined} value
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
*/
proto.speech_to_text.RecognitionConfig.prototype.setDiarizationConfig = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.RecognitionConfig} returns this
 */
proto.speech_to_text.RecognitionConfig.prototype.clearDiarizationConfig = function() {
  return this.setDiarizationConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.RecognitionConfig.prototype.hasDiarizationConfig = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.SpeechContext.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.SpeechContext.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.SpeechContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.SpeechContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    phrasesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.SpeechContext}
 */
proto.speech_to_text.SpeechContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.SpeechContext;
  return proto.speech_to_text.SpeechContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.SpeechContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.SpeechContext}
 */
proto.speech_to_text.SpeechContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPhrases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.SpeechContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.SpeechContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.SpeechContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhrasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string phrases = 1;
 * @return {!Array<string>}
 */
proto.speech_to_text.SpeechContext.prototype.getPhrasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.speech_to_text.SpeechContext} returns this
 */
proto.speech_to_text.SpeechContext.prototype.setPhrasesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.SpeechContext} returns this
 */
proto.speech_to_text.SpeechContext.prototype.addPhrases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.SpeechContext} returns this
 */
proto.speech_to_text.SpeechContext.prototype.clearPhrasesList = function() {
  return this.setPhrasesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.SpeakerDiarizationConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.SpeakerDiarizationConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeakerDiarizationConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableSpeakerDiarization: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    minSpeakerCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxSpeakerCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.SpeakerDiarizationConfig}
 */
proto.speech_to_text.SpeakerDiarizationConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.SpeakerDiarizationConfig;
  return proto.speech_to_text.SpeakerDiarizationConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.SpeakerDiarizationConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.SpeakerDiarizationConfig}
 */
proto.speech_to_text.SpeakerDiarizationConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSpeakerDiarization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinSpeakerCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxSpeakerCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.SpeakerDiarizationConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.SpeakerDiarizationConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeakerDiarizationConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableSpeakerDiarization();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMinSpeakerCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxSpeakerCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool enable_speaker_diarization = 1;
 * @return {boolean}
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.getEnableSpeakerDiarization = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speech_to_text.SpeakerDiarizationConfig} returns this
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.setEnableSpeakerDiarization = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 min_speaker_count = 2;
 * @return {number}
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.getMinSpeakerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.SpeakerDiarizationConfig} returns this
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.setMinSpeakerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_speaker_count = 3;
 * @return {number}
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.getMaxSpeakerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.SpeakerDiarizationConfig} returns this
 */
proto.speech_to_text.SpeakerDiarizationConfig.prototype.setMaxSpeakerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speech_to_text.RecognitionAudio.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.speech_to_text.RecognitionAudio.AudioSourceCase = {
  AUDIO_SOURCE_NOT_SET: 0,
  CONTENT: 1,
  URI: 2
};

/**
 * @return {proto.speech_to_text.RecognitionAudio.AudioSourceCase}
 */
proto.speech_to_text.RecognitionAudio.prototype.getAudioSourceCase = function() {
  return /** @type {proto.speech_to_text.RecognitionAudio.AudioSourceCase} */(jspb.Message.computeOneofCase(this, proto.speech_to_text.RecognitionAudio.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.RecognitionAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.RecognitionAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.RecognitionAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognitionAudio.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64(),
    uri: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.RecognitionAudio}
 */
proto.speech_to_text.RecognitionAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.RecognitionAudio;
  return proto.speech_to_text.RecognitionAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.RecognitionAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.RecognitionAudio}
 */
proto.speech_to_text.RecognitionAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.RecognitionAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.RecognitionAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.RecognitionAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognitionAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.speech_to_text.RecognitionAudio.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.speech_to_text.RecognitionAudio.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.speech_to_text.RecognitionAudio.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.speech_to_text.RecognitionAudio} returns this
 */
proto.speech_to_text.RecognitionAudio.prototype.setContent = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.speech_to_text.RecognitionAudio.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speech_to_text.RecognitionAudio} returns this
 */
proto.speech_to_text.RecognitionAudio.prototype.clearContent = function() {
  return jspb.Message.setOneofField(this, 1, proto.speech_to_text.RecognitionAudio.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.RecognitionAudio.prototype.hasContent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.speech_to_text.RecognitionAudio.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.RecognitionAudio} returns this
 */
proto.speech_to_text.RecognitionAudio.prototype.setUri = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.speech_to_text.RecognitionAudio.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speech_to_text.RecognitionAudio} returns this
 */
proto.speech_to_text.RecognitionAudio.prototype.clearUri = function() {
  return jspb.Message.setOneofField(this, 2, proto.speech_to_text.RecognitionAudio.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.RecognitionAudio.prototype.hasUri = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.RecognizeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.RecognizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.RecognizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.RecognizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.speech_to_text.SpeechRecognitionResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.RecognizeResponse}
 */
proto.speech_to_text.RecognizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.RecognizeResponse;
  return proto.speech_to_text.RecognizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.RecognizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.RecognizeResponse}
 */
proto.speech_to_text.RecognizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.SpeechRecognitionResult;
      reader.readMessage(value,proto.speech_to_text.SpeechRecognitionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.RecognizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.RecognizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.RecognizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.RecognizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.speech_to_text.SpeechRecognitionResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SpeechRecognitionResult results = 1;
 * @return {!Array<!proto.speech_to_text.SpeechRecognitionResult>}
 */
proto.speech_to_text.RecognizeResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.speech_to_text.SpeechRecognitionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speech_to_text.SpeechRecognitionResult, 1));
};


/**
 * @param {!Array<!proto.speech_to_text.SpeechRecognitionResult>} value
 * @return {!proto.speech_to_text.RecognizeResponse} returns this
*/
proto.speech_to_text.RecognizeResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.speech_to_text.SpeechRecognitionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.SpeechRecognitionResult}
 */
proto.speech_to_text.RecognizeResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.speech_to_text.SpeechRecognitionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.RecognizeResponse} returns this
 */
proto.speech_to_text.RecognizeResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.LongRunningRecognizeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.LongRunningRecognizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.LongRunningRecognizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.LongRunningRecognizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.LongRunningRecognizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.speech_to_text.SpeechRecognitionResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.LongRunningRecognizeResponse}
 */
proto.speech_to_text.LongRunningRecognizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.LongRunningRecognizeResponse;
  return proto.speech_to_text.LongRunningRecognizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.LongRunningRecognizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.LongRunningRecognizeResponse}
 */
proto.speech_to_text.LongRunningRecognizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.SpeechRecognitionResult;
      reader.readMessage(value,proto.speech_to_text.SpeechRecognitionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.LongRunningRecognizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.LongRunningRecognizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.LongRunningRecognizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.LongRunningRecognizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.speech_to_text.SpeechRecognitionResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SpeechRecognitionResult results = 1;
 * @return {!Array<!proto.speech_to_text.SpeechRecognitionResult>}
 */
proto.speech_to_text.LongRunningRecognizeResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.speech_to_text.SpeechRecognitionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speech_to_text.SpeechRecognitionResult, 1));
};


/**
 * @param {!Array<!proto.speech_to_text.SpeechRecognitionResult>} value
 * @return {!proto.speech_to_text.LongRunningRecognizeResponse} returns this
*/
proto.speech_to_text.LongRunningRecognizeResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.speech_to_text.SpeechRecognitionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.SpeechRecognitionResult}
 */
proto.speech_to_text.LongRunningRecognizeResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.speech_to_text.SpeechRecognitionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.LongRunningRecognizeResponse} returns this
 */
proto.speech_to_text.LongRunningRecognizeResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.StreamingRecognizeResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.StreamingRecognizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.StreamingRecognizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && google_rpc_status_pb.Status.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.speech_to_text.StreamingRecognitionResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.StreamingRecognizeResponse}
 */
proto.speech_to_text.StreamingRecognizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.StreamingRecognizeResponse;
  return proto.speech_to_text.StreamingRecognizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.StreamingRecognizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.StreamingRecognizeResponse}
 */
proto.speech_to_text.StreamingRecognizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.speech_to_text.StreamingRecognitionResult;
      reader.readMessage(value,proto.speech_to_text.StreamingRecognitionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.StreamingRecognizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.StreamingRecognizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.speech_to_text.StreamingRecognitionResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status error = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.getError = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.speech_to_text.StreamingRecognizeResponse} returns this
*/
proto.speech_to_text.StreamingRecognizeResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.StreamingRecognizeResponse} returns this
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StreamingRecognitionResult results = 2;
 * @return {!Array<!proto.speech_to_text.StreamingRecognitionResult>}
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.speech_to_text.StreamingRecognitionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speech_to_text.StreamingRecognitionResult, 2));
};


/**
 * @param {!Array<!proto.speech_to_text.StreamingRecognitionResult>} value
 * @return {!proto.speech_to_text.StreamingRecognizeResponse} returns this
*/
proto.speech_to_text.StreamingRecognizeResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.speech_to_text.StreamingRecognitionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.StreamingRecognitionResult}
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.speech_to_text.StreamingRecognitionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.StreamingRecognizeResponse} returns this
 */
proto.speech_to_text.StreamingRecognizeResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.SpeechRecognitionResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.SpeechRecognitionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.SpeechRecognitionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.SpeechRecognitionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechRecognitionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    alternativesList: jspb.Message.toObjectList(msg.getAlternativesList(),
    proto.speech_to_text.SpeechRecognitionAlternative.toObject, includeInstance),
    channelTag: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.SpeechRecognitionResult}
 */
proto.speech_to_text.SpeechRecognitionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.SpeechRecognitionResult;
  return proto.speech_to_text.SpeechRecognitionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.SpeechRecognitionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.SpeechRecognitionResult}
 */
proto.speech_to_text.SpeechRecognitionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.SpeechRecognitionAlternative;
      reader.readMessage(value,proto.speech_to_text.SpeechRecognitionAlternative.deserializeBinaryFromReader);
      msg.addAlternatives(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.SpeechRecognitionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.SpeechRecognitionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.SpeechRecognitionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechRecognitionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.speech_to_text.SpeechRecognitionAlternative.serializeBinaryToWriter
    );
  }
  f = message.getChannelTag();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated SpeechRecognitionAlternative alternatives = 1;
 * @return {!Array<!proto.speech_to_text.SpeechRecognitionAlternative>}
 */
proto.speech_to_text.SpeechRecognitionResult.prototype.getAlternativesList = function() {
  return /** @type{!Array<!proto.speech_to_text.SpeechRecognitionAlternative>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speech_to_text.SpeechRecognitionAlternative, 1));
};


/**
 * @param {!Array<!proto.speech_to_text.SpeechRecognitionAlternative>} value
 * @return {!proto.speech_to_text.SpeechRecognitionResult} returns this
*/
proto.speech_to_text.SpeechRecognitionResult.prototype.setAlternativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.speech_to_text.SpeechRecognitionAlternative=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative}
 */
proto.speech_to_text.SpeechRecognitionResult.prototype.addAlternatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.speech_to_text.SpeechRecognitionAlternative, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.SpeechRecognitionResult} returns this
 */
proto.speech_to_text.SpeechRecognitionResult.prototype.clearAlternativesList = function() {
  return this.setAlternativesList([]);
};


/**
 * optional int32 channel_tag = 2;
 * @return {number}
 */
proto.speech_to_text.SpeechRecognitionResult.prototype.getChannelTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.SpeechRecognitionResult} returns this
 */
proto.speech_to_text.SpeechRecognitionResult.prototype.setChannelTag = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.StreamingRecognitionResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.StreamingRecognitionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.StreamingRecognitionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognitionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    alternativesList: jspb.Message.toObjectList(msg.getAlternativesList(),
    proto.speech_to_text.SpeechRecognitionAlternative.toObject, includeInstance),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    stability: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    resultEndTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    channelTag: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.StreamingRecognitionResult}
 */
proto.speech_to_text.StreamingRecognitionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.StreamingRecognitionResult;
  return proto.speech_to_text.StreamingRecognitionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.StreamingRecognitionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.StreamingRecognitionResult}
 */
proto.speech_to_text.StreamingRecognitionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speech_to_text.SpeechRecognitionAlternative;
      reader.readMessage(value,proto.speech_to_text.SpeechRecognitionAlternative.deserializeBinaryFromReader);
      msg.addAlternatives(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStability(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setResultEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.StreamingRecognitionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.StreamingRecognitionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.StreamingRecognitionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.speech_to_text.SpeechRecognitionAlternative.serializeBinaryToWriter
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStability();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getResultEndTime();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getChannelTag();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * repeated SpeechRecognitionAlternative alternatives = 1;
 * @return {!Array<!proto.speech_to_text.SpeechRecognitionAlternative>}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.getAlternativesList = function() {
  return /** @type{!Array<!proto.speech_to_text.SpeechRecognitionAlternative>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speech_to_text.SpeechRecognitionAlternative, 1));
};


/**
 * @param {!Array<!proto.speech_to_text.SpeechRecognitionAlternative>} value
 * @return {!proto.speech_to_text.StreamingRecognitionResult} returns this
*/
proto.speech_to_text.StreamingRecognitionResult.prototype.setAlternativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.speech_to_text.SpeechRecognitionAlternative=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.addAlternatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.speech_to_text.SpeechRecognitionAlternative, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.StreamingRecognitionResult} returns this
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.clearAlternativesList = function() {
  return this.setAlternativesList([]);
};


/**
 * optional bool is_final = 2;
 * @return {boolean}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speech_to_text.StreamingRecognitionResult} returns this
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional float stability = 3;
 * @return {number}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.getStability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.StreamingRecognitionResult} returns this
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.setStability = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float result_end_time = 4;
 * @return {number}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.getResultEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.StreamingRecognitionResult} returns this
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.setResultEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 channel_tag = 5;
 * @return {number}
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.getChannelTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.StreamingRecognitionResult} returns this
 */
proto.speech_to_text.StreamingRecognitionResult.prototype.setChannelTag = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speech_to_text.SpeechRecognitionAlternative.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.SpeechRecognitionAlternative.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.SpeechRecognitionAlternative} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechRecognitionAlternative.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcript: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.speech_to_text.WordInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative}
 */
proto.speech_to_text.SpeechRecognitionAlternative.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.SpeechRecognitionAlternative;
  return proto.speech_to_text.SpeechRecognitionAlternative.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.SpeechRecognitionAlternative} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative}
 */
proto.speech_to_text.SpeechRecognitionAlternative.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscript(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 3:
      var value = new proto.speech_to_text.WordInfo;
      reader.readMessage(value,proto.speech_to_text.WordInfo.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.SpeechRecognitionAlternative.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.SpeechRecognitionAlternative} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechRecognitionAlternative.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.speech_to_text.WordInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transcript = 1;
 * @return {string}
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.getTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative} returns this
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.setTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float confidence = 2;
 * @return {number}
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative} returns this
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated WordInfo words = 3;
 * @return {!Array<!proto.speech_to_text.WordInfo>}
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.speech_to_text.WordInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speech_to_text.WordInfo, 3));
};


/**
 * @param {!Array<!proto.speech_to_text.WordInfo>} value
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative} returns this
*/
proto.speech_to_text.SpeechRecognitionAlternative.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.speech_to_text.WordInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speech_to_text.WordInfo}
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.speech_to_text.WordInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speech_to_text.SpeechRecognitionAlternative} returns this
 */
proto.speech_to_text.SpeechRecognitionAlternative.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.WordInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.WordInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.WordInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.WordInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    word: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.WordInfo}
 */
proto.speech_to_text.WordInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.WordInfo;
  return proto.speech_to_text.WordInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.WordInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.WordInfo}
 */
proto.speech_to_text.WordInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.WordInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.WordInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.WordInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.WordInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional float start_time = 1;
 * @return {number}
 */
proto.speech_to_text.WordInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.WordInfo} returns this
 */
proto.speech_to_text.WordInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float end_time = 2;
 * @return {number}
 */
proto.speech_to_text.WordInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.speech_to_text.WordInfo} returns this
 */
proto.speech_to_text.WordInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string word = 3;
 * @return {string}
 */
proto.speech_to_text.WordInfo.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.WordInfo} returns this
 */
proto.speech_to_text.WordInfo.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speech_to_text.SpeechOperation.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.speech_to_text.SpeechOperation.ResultCase = {
  RESULT_NOT_SET: 0,
  ERROR: 3,
  RESPONSE: 4
};

/**
 * @return {proto.speech_to_text.SpeechOperation.ResultCase}
 */
proto.speech_to_text.SpeechOperation.prototype.getResultCase = function() {
  return /** @type {proto.speech_to_text.SpeechOperation.ResultCase} */(jspb.Message.computeOneofCase(this, proto.speech_to_text.SpeechOperation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speech_to_text.SpeechOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.speech_to_text.SpeechOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speech_to_text.SpeechOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    done: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    error: (f = msg.getError()) && google_rpc_status_pb.Status.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.speech_to_text.LongRunningRecognizeResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speech_to_text.SpeechOperation}
 */
proto.speech_to_text.SpeechOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speech_to_text.SpeechOperation;
  return proto.speech_to_text.SpeechOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speech_to_text.SpeechOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speech_to_text.SpeechOperation}
 */
proto.speech_to_text.SpeechOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
      break;
    case 3:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new proto.speech_to_text.LongRunningRecognizeResponse;
      reader.readMessage(value,proto.speech_to_text.LongRunningRecognizeResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speech_to_text.SpeechOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speech_to_text.SpeechOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speech_to_text.SpeechOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speech_to_text.SpeechOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDone();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.speech_to_text.LongRunningRecognizeResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.speech_to_text.SpeechOperation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speech_to_text.SpeechOperation} returns this
 */
proto.speech_to_text.SpeechOperation.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool done = 2;
 * @return {boolean}
 */
proto.speech_to_text.SpeechOperation.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speech_to_text.SpeechOperation} returns this
 */
proto.speech_to_text.SpeechOperation.prototype.setDone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.rpc.Status error = 3;
 * @return {?proto.google.rpc.Status}
 */
proto.speech_to_text.SpeechOperation.prototype.getError = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 3));
};


/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.speech_to_text.SpeechOperation} returns this
*/
proto.speech_to_text.SpeechOperation.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.speech_to_text.SpeechOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.SpeechOperation} returns this
 */
proto.speech_to_text.SpeechOperation.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.SpeechOperation.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LongRunningRecognizeResponse response = 4;
 * @return {?proto.speech_to_text.LongRunningRecognizeResponse}
 */
proto.speech_to_text.SpeechOperation.prototype.getResponse = function() {
  return /** @type{?proto.speech_to_text.LongRunningRecognizeResponse} */ (
    jspb.Message.getWrapperField(this, proto.speech_to_text.LongRunningRecognizeResponse, 4));
};


/**
 * @param {?proto.speech_to_text.LongRunningRecognizeResponse|undefined} value
 * @return {!proto.speech_to_text.SpeechOperation} returns this
*/
proto.speech_to_text.SpeechOperation.prototype.setResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.speech_to_text.SpeechOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speech_to_text.SpeechOperation} returns this
 */
proto.speech_to_text.SpeechOperation.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speech_to_text.SpeechOperation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.speech_to_text);
